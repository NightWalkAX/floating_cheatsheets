name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: floating-cheatsheets
  APP_VERSION: 1.0.0

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper devscripts
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Build Debian package
      run: |
        chmod +x build_deb.sh
        ./build_deb.sh
    
    - name: List built files for debugging
      run: |
        echo "Files in root directory:"
        ls -la *.deb || echo "No .deb files in root"
        echo "All .deb files in project:"
        find . -name "*.deb" -type f
    
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: "*.deb"

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
    
    - name: Convert icon to ICO format
      run: |
        # Check if icon.ico already exists
        if (Test-Path "assets\icon.ico") {
          Write-Host "Icon file already exists, skipping conversion"
          exit 0
        }
        
        # Check if PNG icon exists
        if (-not (Test-Path "assets\icon.png")) {
          Write-Error "Source icon file assets\icon.png not found"
          exit 1
        }
        
        # Use PowerShell to convert PNG to ICO
        try {
          Add-Type -AssemblyName System.Drawing
          $img = [System.Drawing.Image]::FromFile("$pwd\assets\icon.png")
          $ico = [System.Drawing.Icon]::FromHandle(([System.Drawing.Bitmap]$img.GetThumbnailImage(256,256,$null,[System.IntPtr]::Zero)).GetHicon())
          $file = New-Object System.IO.FileStream("$pwd\assets\icon.ico", [System.IO.FileMode]::Create)
          $ico.Save($file)
          $file.Close()
          $img.Dispose()
          $ico.Dispose()
          Write-Host "Icon conversion successful"
        } catch {
          Write-Error "Icon conversion failed: $_"
          exit 1
        }
      shell: powershell
    
    - name: Build Windows executable
      run: |
        # Verify spec file exists
        if (-not (Test-Path "windows/build_windows.spec")) {
          Write-Error "Spec file not found at windows/build_windows.spec"
          exit 1
        }
        
        # Build with PyInstaller
        pyinstaller windows/build_windows.spec --clean --noconfirm
        
        # Verify build was successful
        if (-not (Test-Path "dist/floating-cheatsheets")) {
          Write-Error "Build failed - dist directory not created"
          exit 1
        }
        
        # Rename executable to have .exe extension on Windows if needed
        if ((Test-Path "dist/floating-cheatsheets/floating-cheatsheets") -and (-not (Test-Path "dist/floating-cheatsheets/floating-cheatsheets.exe"))) {
          Move-Item "dist/floating-cheatsheets/floating-cheatsheets" "dist/floating-cheatsheets/floating-cheatsheets.exe"
        }
        
        # List contents for debugging
        Write-Host "Contents of dist/floating-cheatsheets:"
        Get-ChildItem "dist/floating-cheatsheets" | ForEach-Object { Write-Host $_.Name }
      shell: powershell
    
    - name: Install NSIS
      run: |
        try {
          # Method 1: Use Chocolatey to install NSIS
          Write-Host "Installing NSIS via Chocolatey..."
          choco install nsis -y --no-progress
          
          # Verify installation
          $nsisPath = "C:\Program Files (x86)\NSIS"
          if (Test-Path "$nsisPath\makensis.exe") {
            Write-Host "NSIS installed successfully via Chocolatey"
            & "$nsisPath\makensis.exe" /VERSION
            
            # Add to environment for current session and subsequent steps
            $env:PATH = "$nsisPath;$env:PATH"
            "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            throw "Chocolatey installation failed"
          }
        } catch {
          Write-Host "Chocolatey method failed, trying direct download..."
          
          # Method 2: Direct download and install
          $nsisUrl = "https://sourceforge.net/projects/nsis/files/NSIS%203/3.08/nsis-3.08.zip/download"
          $nsisZip = "$env:TEMP\nsis.zip"
          $nsisDir = "C:\nsis"
          
          Write-Host "Downloading NSIS portable..."
          Invoke-WebRequest -Uri $nsisUrl -OutFile $nsisZip -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          
          Write-Host "Extracting NSIS..."
          Expand-Archive -Path $nsisZip -DestinationPath $nsisDir -Force
          
          # Find makensis.exe in extracted folder
          $makeNsisPath = Get-ChildItem -Path $nsisDir -Name "makensis.exe" -Recurse | Select-Object -First 1
          if ($makeNsisPath) {
            $nsisPath = Split-Path -Parent (Join-Path $nsisDir $makeNsisPath)
            Write-Host "NSIS installed successfully at: $nsisPath"
            & "$nsisPath\makensis.exe" /VERSION
            
            # Add to environment
            $env:PATH = "$nsisPath;$env:PATH"
            "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            Write-Error "NSIS installation failed completely"
            exit 1
          }
        }
      shell: powershell
    
    - name: Create Windows installer
      run: |
        # Verify the dist directory exists before creating installer
        if (-not (Test-Path "dist/floating-cheatsheets")) {
          Write-Error "dist/floating-cheatsheets directory not found"
          exit 1
        }
        
        # Show current directory structure for debugging
        Write-Host "Current directory structure:"
        Get-ChildItem -Recurse -Name | Select-Object -First 20
        
        # Verify required files exist
        Write-Host "Checking required files..."
        $requiredFiles = @("assets\icon.ico", "LICENSE", "windows\installer.nsi")
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "Found: $file"
          } else {
            Write-Host "Missing: $file"
          }
        }
        
        # Change to windows directory and create installer
        Set-Location windows
        Write-Host "Changed to windows directory: $(Get-Location)"
        
        # Verify installer script exists
        if (-not (Test-Path "installer.nsi")) {
          Write-Error "installer.nsi not found in windows directory"
          exit 1
        }
        
        # Create the installer using makensis
        Write-Host "Creating installer with NSIS..."
        Write-Host "NSIS Version:"
        makensis /VERSION
        
        Write-Host "Running makensis on installer.nsi..."
        makensis installer.nsi
        
        # Verify installer was created
        if (Test-Path "floating-cheatsheets-1.0.0-setup.exe") {
          Write-Host "Installer created successfully: floating-cheatsheets-1.0.0-setup.exe"
        } else {
          Write-Error "Installer creation failed"
          exit 1
        }
      shell: powershell
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: "windows/*.exe"

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure of downloaded files
      run: |
        echo "Current directory structure:"
        ls -la
        echo "Looking for artifacts:"
        find . -name "*.deb" -o -name "*.exe" | head -10
    
    - name: Delete existing latest release
      continue-on-error: true
      run: |
        gh release delete latest --yes
        git push --delete origin latest || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      run: |
        # Find the actual paths of the built files
        DEB_FILE=$(find . -name "floating-cheatsheets_*.deb" | head -1)
        EXE_FILE=$(find . -name "floating-cheatsheets-*-setup.exe" | head -1)
        
        echo "Found DEB file: $DEB_FILE"
        echo "Found EXE file: $EXE_FILE"
        
        if [ -z "$DEB_FILE" ] || [ -z "$EXE_FILE" ]; then
          echo "Error: Missing build artifacts"
          echo "DEB file: $DEB_FILE"
          echo "EXE file: $EXE_FILE"
          exit 1
        fi
        
        gh release create latest \
          --title "Release ${{ env.APP_VERSION }}" \
          --notes "ðŸš€ **Floating CheatSheets v${{ env.APP_VERSION }}**
        
        ## Downloads
        - **Linux**: Download the \`.deb\` file for Debian/Ubuntu systems
        - **Windows**: Download the \`.exe\` installer for Windows systems
        
        ## Installation
        
        ### Linux (Debian/Ubuntu)
        \`\`\`bash
        sudo dpkg -i floating-cheatsheets_${{ env.APP_VERSION }}_all.deb
        \`\`\`
        
        ### Windows
        Run the \`.exe\` installer and follow the installation wizard.
        
        ## What's New
        - Cross-platform support (Linux and Windows)
        - Floating cheatsheet widget
        - Easy cheatsheet management
        - Customizable interface
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/commits/main" \
          "$DEB_FILE" \
          "$EXE_FILE"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
