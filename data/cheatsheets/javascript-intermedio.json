{
  "title": "JavaScript Intermedio",
  "language": "es",
  "tags": ["javascript", "programming", "intermedio"],
  "items": [
    {
      "code": "Higher-Order Functions",
      "description": "Funciones que operan sobre otras funciones, ya sea tomándolas como argumentos o devolviéndolas.",
      "example": "['a', 'b'].map(c => c.toUpperCase());"
    },
    {
      "code": "this keyword",
      "description": "El valor de 'this' depende de cómo se llama a la función (contexto de ejecución).",
      "example": "En un método de objeto, 'this' se refiere al objeto. En una función regular, a 'window' (o undefined en modo estricto)."
    },
    {
      "code": "Arrow Functions vs Regular",
      "description": "Las funciones de flecha no tienen su propio 'this', lo heredan del scope padre.",
      "example": "const obj = { method() { return () => console.log(this) } };"
    },
    {
      "code": "Promises",
      "description": "Objeto que representa la eventual finalización (o falla) de una operación asíncrona.",
      "example": "new Promise((resolve, reject) => { /* async code */ }).then(onFulfilled, onRejected);"
    },
    {
      "code": ".then(), .catch(), .finally()",
      "description": "Métodos para manejar el resultado de una promesa.",
      "example": "fetch(url).then(res => res.json()).catch(err => console.error(err)).finally(() => console.log('Hecho'));"
    },
    {
      "code": "ES6 Modules",
      "description": "Sistema de módulos para importar y exportar funcionalidades entre archivos.",
      "example": "export const myVar = 1; import { myVar } from './module.js';"
    },
    {
      "code": "Array methods (.map, .filter, .reduce)",
      "description": "Métodos funcionales para la manipulación de arrays.",
      "example": "arr.filter(x => x > 10).map(x => x * 2).reduce((acc, val) => acc + val, 0);"
    },
    {
      "code": "Shallow vs Deep Copy",
      "description": "Copia superficial comparte referencias internas, copia profunda clona todo el objeto.",
      "example": "Shallow: const newArr = [...oldArr]; Deep: const newArr = JSON.parse(JSON.stringify(oldArr));"
    }
  ],
  "created": "2025-09-26",
  "updated": "2025-09-26"
}