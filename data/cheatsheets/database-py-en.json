{
  "title": "Database API (Python)",
  "language": "en",
  "tags": ["python", "database", "orm", "backend"],
  "items": [
    {
      "code": "frappe.db.get_list(doctype, filters, fields, ...)",
      "description": "Returns a list of records from a DocType, applying user permissions. Can specify filters, fields, ordering, and pagination.",
      "example": "tasks = frappe.db.get_list('Task',\n    filters={'status': 'Open'},\n    fields=['subject', 'date'],\n    order_by='date desc'\n)"
    },
    {
      "code": "frappe.db.get_all(doctype, filters, fields, ...)",
      "description": "Similar to `get_list`, but fetches all records without applying user permissions.",
      "example": "all_users = frappe.db.get_all('User', fields=['name', 'full_name'])"
    },
    {
      "code": "frappe.db.get_value(doctype, name | filters, fieldname | [fieldnames])",
      "description": "Returns a single field value or a list/dict of field values for a specific document.",
      "example": "# Get a single value\nsubject = frappe.db.get_value('Task', 'TASK00002', 'subject')\n\n# Get multiple values as a dict\ntask_dict = frappe.db.get_value('Task', 'TASK00002', ['subject', 'description'], as_dict=True)"
    },
    {
      "code": "frappe.db.get_single_value(doctype, fieldname)",
      "description": "Returns a field value from a Single DocType.",
      "example": "timezone = frappe.db.get_single_value('System Settings', 'language')"
    },
    {
      "code": "frappe.db.set_value(doctype, name, fieldname, value)",
      "description": "Sets a field's value directly in the database. Does not call ORM triggers like `validate` or `on_update`.",
      "example": "# Update a single field\nfrappe.db.set_value('Task', 'TASK00002', 'status', 'Completed')\n\n# Update multiple fields\nfrappe.db.set_value('Task', 'TASK00002', {\n    'status': 'Completed',\n    'priority': 'High'\n})"
    },
    {
      "code": "frappe.db.exists(doctype, name | filters)",
      "description": "Returns `True` if a document record exists, identified by name or filters.",
      "example": "if frappe.db.exists('User', 'jane@example.com'):\n    # User exists"
    },
    {
      "code": "frappe.db.count(doctype, filters)",
      "description": "Returns the number of records for a given DocType and optional filters.",
      "example": "open_tasks_count = frappe.db.count('Task', {'status': 'Open'})"
    },
    {
      "code": "frappe.db.delete(doctype, filters)",
      "description": "Deletes records that match the given filters. This is a reversible DML command.",
      "example": "frappe.db.delete('Error Log', {'modified': ('<', '2023-01-01')})"
    },
    {
      "code": "frappe.db.truncate(doctype)",
      "description": "Truncates a table, deleting all its records. This is an irreversible DDL command.",
      "example": "frappe.db.truncate('Error Log')"
    },
    {
      "code": "frappe.db.sql(query, values, as_dict)",
      "description": "Executes an arbitrary SQL query. Should be used with caution as it bypasses the ORM.",
      "example": "data = frappe.db.sql('''SELECT name, status FROM `tabTask` WHERE priority=%(priority)s''',\n    values={'priority': 'High'},\n    as_dict=True\n)"
    },
    {
      "code": "frappe.db.commit()",
      "description": "Commits the current database transaction.",
      "example": "frappe.db.commit()"
    },
    {
      "code": "frappe.db.rollback()",
      "description": "Rolls back the current database transaction.",
      "example": "frappe.db.rollback()"
    }
  ],
  "created": "2024-01-01",
  "updated": "2024-01-01"
}