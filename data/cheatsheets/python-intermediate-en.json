{
  "title": "Intermediate Python",
  "language": "en",
  "tags": ["python", "programming", "intermediate", "advanced"],
  "items": [
    {
      "code": "list comprehension",
      "description": "Create lists concisely",
      "example": "[x*2 for x in range(5)] | [x for x in range(10) if x % 2 == 0]"
    },
    {
      "code": "dict comprehension",
      "description": "Create dictionaries concisely",
      "example": "{x: x**2 for x in range(5)} | {k: v.upper() for k, v in {}.items()}"
    },
    {
      "code": "set comprehension",
      "description": "Create sets concisely",
      "example": "{x*2 for x in range(5)} | {len(word) for word in ['hello', 'world']}"
    },
    {
      "code": "generator expression",
      "description": "Generator expressions for memory efficiency",
      "example": "(x*2 for x in range(1000000)) | sum(x for x in range(100))"
    },
    {
      "code": "lambda",
      "description": "Anonymous functions",
      "example": "lambda x: x*2 | sorted([], key=lambda x: x[1])"
    },
    {
      "code": "map()",
      "description": "Apply a function to all items in an iterable",
      "example": "list(map(lambda x: x*2, [1,2,3])) | list(map(str.upper, ['a','b','c']))"
    },
    {
      "code": "filter()",
      "description": "Filter items that satisfy a condition",
      "example": "list(filter(lambda x: x % 2 == 0, range(10))) | list(filter(None, [0, 1, False, True]))"
    },
    {
      "code": "reduce()",
      "description": "Reduce a list to a single value",
      "example": "from functools import reduce; reduce(lambda x, y: x + y, [1,2,3,4])"
    },
    {
      "code": "zip()",
      "description": "Combine multiple iterables",
      "example": "list(zip([1,2,3], ['a','b','c'])) | dict(zip([], []))"
    },
    {
      "code": "enumerate()",
      "description": "Iterate with indices",
      "example": "for i, value in enumerate(['a','b','c']): print(f\"{i}: {value}\")"
    },
    {
      "code": "*args",
      "description": "Variable-length arguments",
      "example": "def func(*args): return sum(args) | func(1, 2, 3, 4)"
    },
    {
      "code": "**kwargs",
      "description": "Variable-length keyword arguments",
      "example": "def func(**kwargs): return kwargs | func(name='John', age=25)"
    },
    {
      "code": "decorators",
      "description": "Modify the behavior of functions",
      "example": "@property def name(self): return self._name"
    },
    {
      "code": "@staticmethod",
      "description": "Method that does not require an instance",
      "example": "@staticmethod def add(a, b): return a + b"
    },
    {
      "code": "@classmethod",
      "description": "Method that receives the class as the first argument",
      "example": "@classmethod def from_string(cls, data): return cls(**json.loads(data))"
    },
    {
      "code": "property",
      "description": "Turn a method into an attribute",
      "example": "@property def area(self): return self.width * self.height"
    },
    {
      "code": "context managers",
      "description": "Automatic resource management",
      "example": "with open('file.txt', 'r') as f: content = f.read()"
    },
    {
      "code": "custom context manager",
      "description": "Create a custom context",
      "example": "from contextlib import contextmanager; @contextmanager def my_context(): yield \"value\""
    },
    {
      "code": "try/except/else/finally",
      "description": "Complete exception handling",
      "example": "try: operation() except ValueError: print(\"Error\") else: print(\"Success\") finally: cleanup()"
    },
    {
      "code": "raise",
      "description": "Raise custom exceptions",
      "example": "raise ValueError(\"Error message\") | raise Exception from e"
    },
    {
      "code": "assert",
      "description": "Development checks",
      "example": "assert x > 0, \"x must be positive\" | assert isinstance(obj, list)"
    },
    {
      "code": "collections.defaultdict",
      "description": "Dictionary with default values",
      "example": "from collections import defaultdict; dd = defaultdict(list); dd['key'].append('value')"
    },
    {
      "code": "collections.Counter",
      "description": "Element counter",
      "example": "from collections import Counter; Counter(['a','b','a','c','b','a'])"
    },
    {
      "code": "collections.namedtuple",
      "description": "Tuple with names",
      "example": "from collections import namedtuple; Point = namedtuple('Point', ['x', 'y'])"
    },
    {
      "code": "itertools.chain",
      "description": "Concatenate iterables",
      "example": "from itertools import chain; list(chain([1,2], [3,4], [5,6]))"
    },
    {
      "code": "itertools.combinations",
      "description": "Combinations of elements",
      "example": "from itertools import combinations; list(combinations([1,2,3,4], 2))"
    },
    {
      "code": "itertools.permutations",
      "description": "Permutations of elements",
      "example": "from itertools import permutations; list(permutations([1,2,3]))"
    },
    {
      "code": "functools.partial",
      "description": "Partial application of functions",
      "example": "from functools import partial; multiply_by_2 = partial(multiply, 2)"
    },
    {
      "code": "functools.lru_cache",
      "description": "Cache for functions",
      "example": "from functools import lru_cache; @lru_cache(maxsize=128) def fibonacci(n): pass"
    },
    {
      "code": "threading.Thread",
      "description": "Threads for parallelization",
      "example": "import threading; t = threading.Thread(target=function, args=(arg1,))"
    },
    {
      "code": "multiprocessing.Pool",
      "description": "Process pool",
      "example": "from multiprocessing import Pool; with Pool() as p: results = p.map(func, data)"
    },
    {
      "code": "asyncio",
      "description": "Asynchronous programming",
      "example": "import asyncio; async def main(): await async_function()"
    },
    {
      "code": "async/await",
      "description": "Asynchronous functions",
      "example": "async def fetch_data(): return await api_call()"
    },
    {
      "code": "pathlib.Path",
      "description": "Modern path handling",
      "example": "from pathlib import Path; p = Path('folder') / 'file.txt'"
    },
    {
      "code": "json.loads/dumps",
      "description": "Work with JSON",
      "example": "import json; data = json.loads(json_string); json_str = json.dumps(data)"
    },
    {
      "code": "datetime",
      "description": "Date and time handling",
      "example": "from datetime import datetime, timedelta; now = datetime.now()"
    },
    {
      "code": "re.search/findall",
      "description": "Regular expressions",
      "example": "import re; re.search(r'\\d+', text); re.findall(r'\\w+', text)"
    },
    {
      "code": "os.path",
      "description": "Path operations",
      "example": "import os; os.path.join('folder', 'file.txt'); os.path.exists(path)"
    },
    {
      "code": "sys.argv",
      "description": "Command-line arguments",
      "example": "import sys; script_name = sys.argv[0]; args = sys.argv[1:]"
    },
    {
      "code": "logging",
      "description": "Logging system",
      "example": "import logging; logging.basicConfig(level=logging.INFO); logging.info('message')"
    },
    {
      "code": "pickle",
      "description": "Python object serialization",
      "example": "import pickle; pickle.dump(obj, file); obj = pickle.load(file)"
    },
    {
      "code": "csv.reader/writer",
      "description": "Work with CSV files",
      "example": "import csv; with open('file.csv') as f: reader = csv.reader(f)"
    },
    {
      "code": "urllib.request",
      "description": "Make HTTP requests",
      "example": "from urllib.request import urlopen; response = urlopen('http://example.com')"
    },
    {
      "code": "dataclasses",
      "description": "Automatic data classes",
      "example": "from dataclasses import dataclass; @dataclass class Person: name: str; age: int"
    },
    {
      "code": "typing",
      "description": "Type hints",
      "example": "from typing import List, Dict, Optional; def func(items: List[str]) -> Optional[str]: pass"
    },
    {
      "code": "__name__ == '__main__'",
      "description": "Execute only if it's the main script",
      "example": "if __name__ == '__main__': main()"
    },
    {
      "code": "super()",
      "description": "Call methods of the parent class",
      "example": "class Child(Parent): def __init__(self): super().__init__()"
    },
    {
      "code": "hasattr/getattr/setattr",
      "description": "Work with attributes dynamically",
      "example": "hasattr(obj, 'attr'); getattr(obj, 'attr', default); setattr(obj, 'attr', value)"
    },
    {
      "code": "globals()/locals()",
      "description": "Access namespaces",
      "example": "globals()['variable'] = value; local_vars = locals()"
    },
    {
      "code": "eval()/exec()",
      "description": "Execute code dynamically",
      "example": "result = eval('2 + 2'); exec('print(\"Hello\")')"
    },
    {
      "code": "isinstance()",
      "description": "Check object type",
      "example": "isinstance(obj, (list, tuple)); isinstance(x, int)"
    },
    {
      "code": "issubclass()",
      "description": "Check class inheritance",
      "example": "issubclass(Child, Parent)"
    },
    {
      "code": "__slots__",
      "description": "Optimize memory in classes",
      "example": "class Point: __slots__ = ['x', 'y']"
    }
  ],
  "created": "2025-09-26",
  "updated": "2025-10-01"
}