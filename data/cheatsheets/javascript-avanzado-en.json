{
  "title": "Advanced JavaScript",
  "language": "en",
  "tags": ["javascript", "programming", "advanced"],
  "items": [
    {
      "code": "async/await",
      "description": "Syntax for handling promises in a more readable way",
      "example": "async function fetchData() { try { const data = await fetch(url); } catch (e) { console.error(e); } }"
    },
    {
      "code": "Promise.all()",
      "description": "Executes multiple promises in parallel",
      "example": "Promise.all([p1, p2, p3]).then(values => { /* ... */ });"
    },
    {
      "code": "Closures",
      "description": "A function that remembers the scope where it was created",
      "example": "function outer() { let v = 'a'; return () => console.log(v); }"
    },
    {
      "code": "Prototypes",
      "description": "JavaScript's inheritance mechanism",
      "example": "let obj = {}; let proto = Object.getPrototypeOf(obj);"
    },
    {
      "code": "Destructuring",
      "description": "Extract data from arrays or objects",
      "example": "const { a, b } = obj; const [x, y] = arr;"
    },
    {
      "code": "Spread Operator (...)",
      "description": "Expand elements of an iterable",
      "example": "const arr2 = [...arr1]; const obj2 = { ...obj1 };"
    },
    {
      "code": "Map, Set, WeakMap, WeakSet",
      "description": "Advanced data collections",
      "example": "let map = new Map(); let set = new Set();"
    },
    {
      "code": "Event Loop",
      "description": "JavaScript's concurrency model",
      "example": "Concept: Call Stack, Task Queue, Browser APIs"
    }
  ],
  "created": "2025-09-26",
  "updated": "2025-10-01"
}